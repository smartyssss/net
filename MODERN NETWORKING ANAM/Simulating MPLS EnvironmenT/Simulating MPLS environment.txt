                     PRATICAL 7: 
Simulating MPLS Environment


R1
hostname R1

int lo0
ip add 1.1.1.1 255.255.255.255
ip ospf 1 area 0
int f0/0
ip add 10.0.0.1 255.255.255.0
no shut
ip ospf 1 area 0

R2
hostname R2

int lo0
ip add 2.2.2.2 255.255.255.255
ip ospf 1 area 0
int f0/0
ip add 10.0.0.2 255.255.255.0
no shut
ip ospf 1 area 0
int f0/1
ip add 10.0.1.2 255.255.255.0
no shut
ip ospf 1 area 0

R3
hostname R3

int lo0
ip add 3.3.3.3 255.255.255.255
ip ospf 1 area 0
int f0/0
ip add 10.0.1.3 255.255.255.0
no shut
ip ospf 1 area 0

You should now have full ip connectivity between R1, R2, R3 to verify this
we need to see if we can ping between the loopbacks of R1 and R3

R1#
ping 3.3.3.3 source lo0

R2#
ping 3.3.3.3 source lo0

R3#
ping 3.3.3.3 source lo0

Step 2 – Configure LDP on all the interfaces in the MPLS Core
In order to run MPLS you need to enable it, there are two ways to do this.
 At each interface enter the mpls ip command
 Under the ospf process use the mpls ldp autoconfig command
For this tutorial we will be using the second option, so go int the ospf
process and enter mpls ldp autoconfig – this will enable mpls label
distribution protocol on every interface running ospf under that specific
process.

R1#conf t

router ospf 1
mpls ldp autoconfig

R2#conf t
router ospf 1
mpls ldp autoconfig

R3#conf t
router ospf 1
mpls ldp autoconfig

You should see log messages coming up showing the LDP neighbors are up
R1#exit
R1#end

R2#exit
R2#end

R3#exit
R3#end

To verify the mpls interfaces the command is very simple – sh mpls Interface
This is done on R2 and you can see that both interfaces are running mpls
and using LDP

R2#
sh mpls interface

R2#
sh mpls ldp neigh

One more verification to confirm LDP is running ok is to do a trace between
R1 and R3 and verify if you get MPLS Labels show up in the trace.

R1#
trace 3.3.3.3


Step 3 – MPLS BGP Configuration between R1 and R3
We need to establish a Multi Protocol BGP session between R1 and R3 this
is done by configuring the vpnv4 address family as below

R1#conf t
router bgp 1
neighbor 3.3.3.3 remote-as 1
neighbor 3.3.3.3 update-source Loopback0
no auto-summary
address-family vpnv4
neighbor 3.3.3.3 activate

R3#conf t
router bgp 1
neighbor 1.1.1.1 remote-as 1
neighbor 1.1.1.1 update-source Loopback0

To verify the BGP session between R1 and R3 issue the command sh bgp
vpnv4 unicast all summary

R1#
sh bgp vpnv4 unicast all summary

Step 4 – Add two more routers, create VRFs
We will add two more routers into the topology so it now looks like the final

Router 4 will peer OSPF using process number 2 to a VRF configured on
R1. It will use the local site addressing of 192.168.1.0/24.

R4
int lo0
ip add 4.4.4.4 255.255.255.255
ip ospf 2 area 2
int f0/0
ip add 192.168.1.4 255.255.255.0
ip ospf 2 area 2
no shut

R1#conf t
int f0/1
no shut
ip add 192.168.1.1 255.255.255.0

Now at this point we have R4 peering to R1 but in the global routing table of
R1 which is not what we want.
We are now going to start using VRF’s, we now need to create a VRF on R1

R1
ip vrf RED
rd 4:4
route-target both 4:4
exit

R1
R1(config)#
int f0/1
ip vrf forwarding RED
Now notice what happens when you do that – the IP address is removed
R1(config-if)#ip vrf fo

You just need to re-apply it
R1#conf t
int f0/1
ip address 192.168.1.1 255.255.255.0

Now if we view the config on R1 int f0/1 you can see the VRF configured.
R1#
sh run int f0/1


R1#
sh ip route
R1#
sh ip route vrf RED

We just need to enable OSPF on this interface and get the loopback address
for R4 in the VRF RED routing table before proceeding.

R1conf t
int f0/1
ip ospf 2 area 2

If we now check the routes in the VRF RED routing table you should see
4.4.4.4 in there as well.

R1#
sh ip route vrf RED

We now need to repeat this process for R3 & R6
Router 6 will peer OSPF using process number 2 to a VRF configured on R3. It will use 
the local site addressing of 192.168.2.0/24.

R5#conf t
int lo0
ip add 6.6.6.6 255.255.255.255
ip ospf 2 area 2
int f0/0
ip add 192.168.2.6 255.255.255.0
ip ospf 2 area 2
no shut


R3#conf t
int f0/1
no shut
ip add 192.168.2.3 255.255.255.0

We also need to configure a VRF onto R3 as well.

R3#conf t
ip vrf RED
rd 4:4
route-target both 4:4

R3#conf t
int f0/1
ip vrf forwarding REDe
R3(config-if)#
ip vrf forwarding RED

R3#conf t
int f0/1
ip address 192.168.2.1 255.255.255.0
exit
Now if we view the config on R3 int f0/1 you can see the VRF configured.

R3#
sh run int f0/1

Finally we just need to enable OSPF on that interface and verify the routes are in the 
RED routing table.

R3#conf t
int f0/1end

ip ospf 2 area 2

Check the routes in vrf RED

R3
R3#
sh ip route vrf RED

Check the routes on R4
R4#
sh ip route

Check the routes on R1
R1#
sh ip route

R1#
sh ip route vrf RED


Here you can see Routing Table: RED is shown and the routes to R4 are
now visible with 4.4.4.4 being in OSPF.
So we need to do the following;
Redistribute OSPF into MP-BGP on R1
Redistribute MP-BGP into OSPF on R1
Redistribute OSPF into MP-BGP on R3
Redistribute MP-BGP into OSPF on R3
Redistribute OSPF into MP-BGP on R1

R1#conf t
router bgp 1
address-family ipv4 vrf RED
redistribute ospf 2

R3#conf t
router bgp 1
address-family ipv4 vrf RED
redistribute ospf 2

R1#
sh ip bgp vpnv4 vrf RED

R3#
sh ip bgp vpnv4 vrf RED

R1#conf t
router ospf 2
redistribute bgp 1 subnets


R3#conf t
router ospf 2
redistribute bgp 1 subnets

R4#
sh ip route

R6#
sh ip route

R4#
ping 6.6.6.6

R4#
trace 6.6.6.6